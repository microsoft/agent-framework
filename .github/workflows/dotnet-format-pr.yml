#
# This workflow formats .NET code in pull requests when a member/owner/collaborator comments
# '/format' on the PR
#

name: Format .NET code

on:
  workflow_dispatch:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write

jobs:
  dotnet-format:
    name: Run dotnet-format
    runs-on: ubuntu-latest
    
    # Only run on PR comments that contain the trigger phrase
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request && 
       contains(github.event.comment.body, '/format') &&
       (github.event.comment.author_association == 'MEMBER' || 
        github.event.comment.author_association == 'OWNER' || 
        github.event.comment.author_association == 'COLLABORATOR'))
    
    steps:
      - name: Get PR details
        id: pr-details
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            return {
              head_ref: pr.data.head.ref,
              head_sha: pr.data.head.sha,
              head_repo: pr.data.head.repo.full_name
            };

      - name: React to comment
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: '+1'
            });

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event_name == 'issue_comment' && fromJson(steps.pr-details.outputs.result).head_ref || github.ref }}
          repository: ${{ github.event_name == 'issue_comment' && fromJson(steps.pr-details.outputs.result).head_repo || github.repository }}
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0'

      - name: Find .NET projects
        id: find-projects
        run: |
          # Find all solution files first
          solutions=$(find ./dotnet -name "*.sln" -o -name "*.slnx" | head -1)
          
          if [[ -n "$solutions" ]]; then
            echo "projects=$solutions" >> $GITHUB_OUTPUT
            echo "Found solution: $solutions"
          else
            # Fallback to individual projects (excluding test projects for performance)
            projects=$(find ./dotnet -name "*.csproj" | grep -v -E "(Test|Tests)" | head -20 | tr '\n' ' ')
            echo "projects=$projects" >> $GITHUB_OUTPUT
            echo "Found projects: $projects"
          fi

      - name: Restore dependencies
        if: steps.find-projects.outputs.projects != ''
        run: |
          for project in ${{ steps.find-projects.outputs.projects }}; do
            echo "Restoring $project"
            dotnet restore "$project" --verbosity minimal
          done

      - name: Run dotnet format
        if: steps.find-projects.outputs.projects != ''
        run: |
          # Apply formatting to all found projects
          for project in ${{ steps.find-projects.outputs.projects }}; do
            echo "Formatting $project"
            dotnet format "$project" --verbosity diagnostic
          done

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No formatting changes needed"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Formatting changes detected"
            git diff --name-only
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add .
          git commit -m "Format .NET code
          
          Applied code formatting using dotnet format.
          
          Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"
          
          git push origin HEAD

      - name: Comment on PR (success)
        if: github.event_name == 'issue_comment' && steps.changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '✅ **Auto-formatting completed!**\n\nI have automatically applied code formatting to this PR. Please review the changes and ensure they look correct.'
            });

      - name: Comment on PR (no changes)
        if: github.event_name == 'issue_comment' && steps.changes.outputs.has_changes == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '✅ **Code formatting check completed!**\n\nNo formatting changes were needed. The code is already properly formatted.'
            });

      - name: Update status on failure
        if: failure() && github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '❌ **Auto-formatting failed!**\n\nThere was an error while trying to format the code. Please check the workflow logs for details and try running `dotnet format` locally.'
            });
