#
# This workflow runs the dotnet formatter to check code formatting.
#

name: dotnet-format-check

on:
  workflow_dispatch:
  pull_request:
    branches: ["main", "feature*"]
    paths:
      - dotnet/**
      - '.github/workflows/dotnet-format.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  check-format:
    name: Check code formatting
    strategy:
      fail-fast: false
      matrix:
        include:
          - { dotnet: "9.0", configuration: Release, os: ubuntu-latest }

    runs-on: ${{ matrix.os }}
    env:
      NUGET_CERT_REVOCATION_MODE: offline

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Get changed files
        id: changed-files
        if: github.event_name == 'pull_request'
        uses: jitterbit/get-changed-files@v1
        continue-on-error: true

      - name: Filter C# files
        id: filter-csharp
        if: github.event_name == 'pull_request'
        run: |
          if [[ "${{ steps.changed-files.outcome }}" == "success" ]]; then
            csharp_files=$(echo "${{ steps.changed-files.outputs.added_modified }}" | tr ' ' '\n' | grep -E '\.(cs|csproj|slnx|sln)$' || true)
            if [[ -n "$csharp_files" ]]; then
              echo "has_csharp_changes=true" >> $GITHUB_OUTPUT
              echo "C# files changed:"
              echo "$csharp_files"
            else
              echo "has_csharp_changes=false" >> $GITHUB_OUTPUT
              echo "No C# files changed"
            fi
          else
            echo "has_csharp_changes=true" >> $GITHUB_OUTPUT
            echo "Could not determine changed files, proceeding with format check"
          fi

      - name: Find projects to format
        id: find-projects
        if: github.event_name != 'pull_request' || steps.filter-csharp.outputs.has_csharp_changes == 'true'
        run: |
          # For workflow_dispatch or when C# files changed, find all projects
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Format the entire solution for manual runs
            projects=$(find ./dotnet -name "*.slnx" -o -name "*.sln" | head -1)
            if [[ -z "$projects" ]]; then
              # Fallback to individual projects if no solution found
              projects=$(find ./dotnet -name "*.csproj" | grep -v Test | head -10 | tr '\n' ' ')
            fi
          else
            # For PRs, find affected projects based on changed files
            projects=""
            exclude_files=("Experimental.Orchestration.Flow.csproj" "Experimental.Orchestration.Flow.UnitTests.csproj" "Experimental.Orchestration.Flow.IntegrationTests.csproj")
            
            if [[ "${{ steps.changed-files.outcome }}" == "success" ]]; then
              for file in ${{ steps.changed-files.outputs.added_modified }}; do
                if [[ "$file" == dotnet/* ]]; then
                  dir=$(dirname "$file")
                  while [[ "$dir" != "." && "$dir" != "dotnet" ]]; do
                    if find "$dir" -maxdepth 1 -name "*.csproj" -print -quit | grep -q .; then
                      csproj_path=$(find "$dir" -maxdepth 1 -name "*.csproj" -print -quit)
                      csproj_name=$(basename "$csproj_path")
                      if [[ ! " ${exclude_files[@]} " =~ " ${csproj_name} " ]]; then
                        projects="$projects $csproj_path"
                      fi
                      break
                    fi
                    dir=$(dirname "$dir")
                  done
                fi
              done
            fi
            
            # Remove duplicates and empty entries
            projects=$(echo "$projects" | tr ' ' '\n' | sort -u | grep -v '^$' | tr '\n' ' ')
            
            # If no specific projects found, use the main solution
            if [[ -z "$projects" ]]; then
              projects=$(find ./dotnet -name "*.slnx" -o -name "*.sln" | head -1)
            fi
          fi
          
          echo "projects=$projects" >> $GITHUB_OUTPUT
          echo "Found projects to format: $projects"

      - name: Restore dependencies
        if: steps.find-projects.outputs.projects != ''
        run: |
          for project in ${{ steps.find-projects.outputs.projects }}; do
            echo "Restoring $project"
            dotnet restore "$project"
          done

      - name: Run dotnet format --verify-no-changes
        if: steps.find-projects.outputs.projects != ''
        run: |
          format_failed=false
          for project in ${{ steps.find-projects.outputs.projects }}; do
            echo "Checking format for $project"
            if ! dotnet format "$project" --verify-no-changes --verbosity normal; then
              echo "‚ùå Format check failed for $project"
              format_failed=true
            else
              echo "‚úÖ Format check passed for $project"
            fi
          done
          
          if [[ "$format_failed" == "true" ]]; then
            echo ""
            echo "üí° To fix formatting issues, run:"
            echo "   dotnet format"
            echo ""
            echo "Or use the auto-format workflow to automatically apply fixes."
            exit 1
          fi
