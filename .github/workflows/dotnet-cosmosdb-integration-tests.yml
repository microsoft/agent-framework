#
# This workflow runs Cosmos DB integration tests using the Cosmos DB emulator.
#

name: dotnet-cosmosdb-integration-tests

on:
  workflow_dispatch:
  pull_request:
    branches: ["main", "feature*"]
    paths:
      - dotnet/tests/CosmosDB.IntegrationTests/**
      - dotnet/src/Microsoft.Extensions.AI.Agents.Runtime.Storage.CosmosDB/**
      - '.github/workflows/dotnet-cosmosdb-integration-tests.yml'
  merge_group:
    branches: ["main"]
  push:
    branches: ["main", "feature*"]
    paths:
      - dotnet/tests/CosmosDB.IntegrationTests/**
      - dotnet/src/Microsoft.Extensions.AI.Agents.Runtime.Storage.CosmosDB/**
      - '.github/workflows/dotnet-cosmosdb-integration-tests.yml'
  schedule:
    - cron: "0 2 * * *" # Run at 2 AM UTC daily

env:
  COVERAGE_THRESHOLD: 80

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  dotnet-cosmosdb-integration-tests:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { targetFramework: "net9.0", os: "ubuntu-latest", configuration: Release }
          - { targetFramework: "net9.0", os: "windows-latest", configuration: Release }

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          sparse-checkout: |
            .
            .github
            dotnet

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4.3.1
        with:
          global-json-file: ${{ github.workspace }}/dotnet/global.json

      - name: Build dotnet solutions
        shell: bash
        run: |
          export SOLUTIONS=$(find ./dotnet/ -type f -name "*.slnx" | tr '\n' ' ')
          for solution in $SOLUTIONS; do
            dotnet build $solution -c ${{ matrix.configuration }} --warnaserror
          done

      - name: Setup Docker (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Ensure Docker daemon is running
          sudo systemctl start docker
          sudo systemctl enable docker
          # Add current user to docker group to avoid permission issues
          sudo usermod -aG docker $USER

      - name: Start Cosmos DB Emulator (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Start Cosmos DB emulator in Docker
          docker run -d \
            --name cosmosdb-emulator \
            --publish 8081:8081 \
            --publish 10250-10255:10250-10255 \
            --memory 3g \
            --cpus=2.0 \
            --env AZURE_COSMOS_EMULATOR_PARTITION_COUNT=10 \
            --env AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE=false \
            mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
          
          # Wait for emulator to be ready
          echo "Waiting for Cosmos DB emulator to start..."
          for i in {1..60}; do
            if curl -k https://localhost:8081/_explorer/emulator.pem > /dev/null 2>&1; then
              echo "Cosmos DB emulator is ready!"
              break
            fi
            echo "Attempt $i/60: Waiting for emulator..."
            sleep 10
          done
          
          # Download and install the emulator certificate
          curl -k https://localhost:8081/_explorer/emulator.pem > emulatorcert.crt
          sudo cp emulatorcert.crt /usr/local/share/ca-certificates/
          sudo update-ca-certificates

      - name: Start Cosmos DB Emulator (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          # Download and install Cosmos DB Emulator
          $emulatorUrl = "https://aka.ms/cosmosdb-emulator"
          $emulatorPath = "$env:TEMP\CosmosDB.Emulator.msi"
          
          Write-Host "Downloading Cosmos DB Emulator..."
          Invoke-WebRequest -Uri $emulatorUrl -OutFile $emulatorPath
          
          Write-Host "Installing Cosmos DB Emulator..."
          Start-Process msiexec.exe -Wait -ArgumentList "/i $emulatorPath /quiet /qn /norestart"
          
          Write-Host "Starting Cosmos DB Emulator..."
          & "C:\Program Files\Azure Cosmos DB Emulator\Microsoft.Azure.Cosmos.Emulator.exe" /NoExplorer /NoUI /EnableMongoDbEndpoint=3.6 /DisableRateLimiting /PartitionCount=10 /Consistency=Session
          
          # Wait for emulator to be ready
          Write-Host "Waiting for Cosmos DB emulator to start..."
          $maxAttempts = 60
          $attempt = 0
          do {
              $attempt++
              Start-Sleep -Seconds 10
              try {
                  $response = Invoke-WebRequest -Uri "https://localhost:8081/_explorer/emulator.pem" -UseBasicParsing -SkipCertificateCheck
                  if ($response.StatusCode -eq 200) {
                      Write-Host "Cosmos DB emulator is ready!"
                      break
                  }
              }
              catch {
                  Write-Host "Attempt $attempt/$maxAttempts`: Waiting for emulator..."
              }
          } while ($attempt -lt $maxAttempts)

      - name: Run Cosmos DB Integration Tests
        shell: bash
        run: |
          # Set environment variable to use emulator
          export COSMOSDB_TESTS_USE_EMULATOR=true
          
          # Run the specific CosmosDB integration tests
          dotnet test ./dotnet/tests/CosmosDB.IntegrationTests/Microsoft.Extensions.AI.Agents.Runtime.Storage.CosmosDB.Tests/Microsoft.Extensions.AI.Agents.Runtime.Storage.CosmosDB.Tests.csproj \
            -f ${{ matrix.targetFramework }} \
            -c ${{ matrix.configuration }} \
            --no-build \
            -v Normal \
            --logger trx \
            --collect:"XPlat Code Coverage" \
            --results-directory:"TestResults/Coverage/" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.ExcludeByAttribute=GeneratedCodeAttribute,CompilerGeneratedAttribute,ExcludeFromCodeCoverageAttribute

      - name: Stop Cosmos DB Emulator
        if: always()
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            # Stop and remove Docker container
            docker stop cosmosdb-emulator || true
            docker rm cosmosdb-emulator || true
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            # Stop emulator process on Windows
            taskkill /F /IM "Microsoft.Azure.Cosmos.Emulator.exe" || true
          fi

      # Generate test reports and check coverage
      - name: Generate test reports
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.11
        with:
          reports: "./TestResults/Coverage/**/coverage.cobertura.xml"
          targetdir: "./TestResults/Reports"
          reporttypes: "HtmlInline;JsonSummary"

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: CosmosDB-CoverageReport-${{ matrix.os }}-${{ matrix.targetFramework }}-${{ matrix.configuration }}
          path: ./TestResults/Reports

      - name: Check coverage
        shell: pwsh
        run: .github/workflows/dotnet-check-coverage.ps1 -JsonReportPath "TestResults/Reports/Summary.json" -CoverageThreshold $env:COVERAGE_THRESHOLD

  # This final job is required to satisfy the merge queue
  dotnet-cosmosdb-integration-tests-check:
    if: always()
    runs-on: ubuntu-latest
    needs: [dotnet-cosmosdb-integration-tests]
    steps:
      - name: Get Date
        shell: bash
        run: |
          echo "date=$(date +'%m/%d/%Y %H:%M:%S')" >> "$GITHUB_ENV"

      - name: Run Type is Daily
        if: ${{ github.event_name == 'schedule' }}
        shell: bash
        run: |
          echo "run_type=Daily" >> "$GITHUB_ENV"

      - name: Run Type is Manual
        if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        run: |
          echo "run_type=Manual" >> "$GITHUB_ENV"

      - name: Run Type is ${{ github.event_name }}
        if: ${{ github.event_name != 'schedule' && github.event_name != 'workflow_dispatch'}}
        shell: bash
        run: |
          echo "run_type=${{ github.event_name }}" >> "$GITHUB_ENV"

      - name: Fail workflow if tests failed
        id: check_tests_failed
        if: contains(join(needs.*.result, ','), 'failure')
        uses: actions/github-script@v7
        with:
          script: core.setFailed('Cosmos DB Integration Tests Failed!')

      - name: Fail workflow if tests cancelled
        id: check_tests_cancelled
        if: contains(join(needs.*.result, ','), 'cancelled')
        uses: actions/github-script@v7
        with:
          script: core.setFailed('Cosmos DB Integration Tests Cancelled!')
