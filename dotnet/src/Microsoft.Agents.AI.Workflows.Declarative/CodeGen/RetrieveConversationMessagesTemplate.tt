<#@ template language="C#" inherits="ActionTemplate" visibility="internal" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ include file="Snippets/Index.tt" once="true" #>f
/// <summary>
/// Retrieves a specific message from an agent conversation.
/// </summary>
internal sealed class <#= this.Name #>Executor(FormulaSession session, WorkflowAgentProvider agentProvider) : ActionExecutor(id: "<#= this.Id #>", session)
{
    // <inheritdoc />
    protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
    {<#
        EvaluateStringExpression(this.Model.ConversationId, "conversationId");
        EvaluateIntExpression(this.Model.Limit, "limit");
        EvaluateStringExpression(this.Model.MessageAfter, "after", isNullable: true);
        EvaluateStringExpression(this.Model.MessageBefore, "before", isNullable: true);
        EvaluateEnumExpression<AgentMessageSortOrderWrapper, bool>(this.Model.SortOrder, "newestFirst", SortMap, defaultValue: DefaultSort); #>
        ChatMessage messages = 
            await agentProvider.GetMessageAsync(
                converationId, 
                limit, 
                after,
                before,
                newestFirst,
                cancellationToken).ConfigureAwait(false);<#
        AssignVariable(this.Model.Messages, "messages");
        #>
        return default;
    }
}