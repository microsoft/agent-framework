// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.Agents.AI.Workflows.Declarative.CodeGen
{
    using Microsoft.Agents.AI.Workflows.Declarative.Extensions;
    using Microsoft.Agents.AI.Workflows.Declarative.Interpreter;
    using Microsoft.Bot.ObjectModel;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.AI.Workflows.Declarative\CodeGen\RootTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class RootTemplate : CodeTemplate, IModeledAction
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n/// <summary>\n/// The root executor for a declarative workflow.\n/// </summary>\ni" +
                    "nternal sealed class ");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.AI.Workflows.Declarative\CodeGen\RootTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName));
            
            #line default
            #line hidden
            this.Write("Executor<TInput>(\n    DeclarativeWorkflowOptions options,\n    Func<TInput, ChatMe" +
                    "ssage> inputTransform) :\n    RootExecutor<TInput>(\"");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.AI.Workflows.Declarative\CodeGen\RootTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Id));
            
            #line default
            #line hidden
            this.Write("\", options, inputTransform)\n    where TInput : notnull\n{\n    protected override a" +
                    "sync ValueTask ExecuteAsync(TInput message, IWorkflowContext context, Cancellati" +
                    "onToken cancellationToken)\n    {");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.AI.Workflows.Declarative\CodeGen\RootTemplate.tt"
 
if (this.TypeInfo.EnvironmentVariables.Count > 0)
{ 
            
            #line default
            #line hidden
            this.Write("\n        // Set environment variables\n        await this.InitializeEnvironmentAsy" +
                    "nc(\n            context,");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.AI.Workflows.Declarative\CodeGen\RootTemplate.tt"

    int index = this.TypeInfo.EnvironmentVariables.Count - 1;
    foreach (string variableName in this.TypeInfo.EnvironmentVariables)
    {
            
            #line default
            #line hidden
            this.Write("\n            \"");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.AI.Workflows.Declarative\CodeGen\RootTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write("\"");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.AI.Workflows.Declarative\CodeGen\RootTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index > 0 ? "," : ""));
            
            #line default
            #line hidden
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.AI.Workflows.Declarative\CodeGen\RootTemplate.tt"

        --index;
    }
            
            #line default
            #line hidden
            this.Write(").ConfigureAwait(false);\n");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.AI.Workflows.Declarative\CodeGen\RootTemplate.tt"
}

if (this.TypeInfo.UserVariables.Count > 0)
{ 

            
            #line default
            #line hidden
            this.Write("\n        // Initialize variables");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.AI.Workflows.Declarative\CodeGen\RootTemplate.tt"

    foreach (VariableInformationDiagnostic variableInfo in this.TypeInfo.UserVariables)
    {
            
            #line default
            #line hidden
            this.Write("\n        await context.QueueStateUpdateAsync(\"");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.AI.Workflows.Declarative\CodeGen\RootTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableInfo.Path.VariableName));
            
            #line default
            #line hidden
            this.Write("\", UnassignedValue.Instance, \"");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.AI.Workflows.Declarative\CodeGen\RootTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableInfo.Path.NamespaceAlias));
            
            #line default
            #line hidden
            this.Write("\").ConfigureAwait(false);");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.AI.Workflows.Declarative\CodeGen\RootTemplate.tt"

    }
}
            
            #line default
            #line hidden
            this.Write("\n    }\n}\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
