// Copyright (c) Microsoft. All rights reserved.

using Microsoft.Shared.Diagnostics;
using OpenAI.Chat;

namespace Microsoft.Extensions.AI.Agents.OpenAI;

/// <summary>
/// Provides extension methods for <see cref="AgentRunResponseUpdate"/> to extract native OpenAI response objects
/// from the Microsoft Extensions AI Agent framework responses.
/// </summary>
/// <remarks>
/// These extensions enable developers to access the underlying OpenAI SDK objects when working with
/// AI agents that are backed by OpenAI services. The methods extract strongly-typed OpenAI responses
/// from the <see cref="AgentRunResponseUpdate.RawRepresentation"/> property, providing a bridge between
/// the Microsoft Extensions AI framework and the native OpenAI SDK types.
/// </remarks>
public static class AgentRunResponseUpdateExtensions
{
    /// <summary>
    /// Extracts a native OpenAI <see cref="StreamingChatCompletionUpdate"/> object from an <see cref="AgentRunResponseUpdate"/>.
    /// </summary>
    /// <param name="agentResponseUpdate">The agent response containing the raw OpenAI representation.</param>
    /// <returns>The native OpenAI <see cref="StreamingChatCompletionUpdate"/> object.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="agentResponseUpdate"/> is <see langword="null"/>.</exception>
    /// <exception cref="ArgumentException">
    /// Thrown when the <see cref="AgentRunResponseUpdate.RawRepresentation"/> is not a <see cref="ChatResponseUpdate"/> object,
    /// or when the nested <see cref="ChatResponseUpdate.RawRepresentation"/> is not a <see cref="StreamingChatCompletionUpdate"/> object.
    /// This typically occurs when the agent response was not generated by an OpenAI streaming chat completion service
    /// or when the underlying representation has been modified or corrupted.
    /// </exception>
    /// <remarks>
    /// <para>
    /// This method provides access to the native OpenAI <see cref="StreamingChatCompletionUpdate"/> object that was used
    /// to generate the agent response. This is useful when you need to access OpenAI-specific properties
    /// or metadata that are not exposed through the Microsoft Extensions AI abstractions.
    /// </para>
    /// </remarks>
    public static StreamingChatCompletionUpdate AsStreamingChatCompletionUpdate(this AgentRunResponseUpdate agentResponseUpdate)
    {
        Throw.IfNull(agentResponseUpdate);

        if (agentResponseUpdate.RawRepresentation is ChatResponseUpdate chatResponseUpdate)
        {
            return chatResponseUpdate.RawRepresentation is StreamingChatCompletionUpdate streamingChatCompletionUpdate
                ? streamingChatCompletionUpdate
                : throw new ArgumentException("ChatResponseUpdate.RawRepresentation must be a StreamingChatCompletionUpdate");
        }
        throw new ArgumentException("AgentRunResponseUpdate.RawRepresentation must be a ChatResponseUpdate");
    }
}
