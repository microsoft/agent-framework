// Copyright (c) Microsoft. All rights reserved.

using System;
using System.Threading.Tasks;
using Microsoft.Extensions.AI;

namespace Microsoft.Agents;

/// <summary>
/// Optional parameters for agent invocation.
/// </summary>
public class AgentInvokeOptions
{
    /// <summary>
    /// Initializes a new instance of the <see cref="AgentInvokeOptions"/> class.
    /// </summary>
    public AgentInvokeOptions()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="AgentInvokeOptions"/> class by cloning the provided options.
    /// </summary>
    /// <param name="options">The options to clone.</param>
    public AgentInvokeOptions(AgentInvokeOptions options)
    {
        ArgumentNullException.ThrowIfNull(options);

        this.AdditionalInstructions = options.AdditionalInstructions;
        this.OnIntermediateMessage = options.OnIntermediateMessage;
    }

    /// <summary>
    /// Gets or sets any instructions, in addition to those that were provided to the agent
    /// initially, that need to be added to the prompt for this invocation only.
    /// </summary>
    public string AdditionalInstructions { get; init; } = string.Empty;

    /// <summary>
    /// Gets or sets a function to be called when a complete new message is generated by the agent.
    /// </summary>
    /// <remarks>
    /// <para>
    /// This callback is particularly useful in cases where the caller wants to receive complete messages
    /// when invoking the agent with streaming.
    /// </para>
    /// </remarks>
    public Func<ChatMessage, Task>? OnIntermediateMessage { get; init; } = null;
}
