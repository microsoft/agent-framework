// Copyright (c) Microsoft. All rights reserved.

using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Microsoft.Extensions.AI;

/// <summary>
/// Provides extension methods on <see cref="IChatClient"/> that simplify working background responses.
/// </summary>
public static class ChatClientExtensions
{
    /// <summary>Sends chat messages and returns the response.</summary>
    /// <param name="chatClient">The <see cref="IChatClient"/>.</param>
    /// <param name="continuationToken">The continuation token to continue an ongoing operation.</param>
    /// <param name="options">The background responses options.</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <returns>The response messages generated by the client.</returns>
    public static Task<ChatResponse> GetResponseAsync(this IChatClient chatClient, ResumptionToken continuationToken, BackgroundResponsesOptions? options = null, CancellationToken cancellationToken = default)
    {
        NewChatOptions chatOptions = new()
        {
            ContinuationToken = continuationToken,
            BackgroundResponsesOptions = options
        };

        return chatClient.GetResponseAsync([], chatOptions, cancellationToken);
    }

    /// <summary>Sends chat messages and returns the response.</summary>
    /// <param name="chatClient">The <see cref="IChatClient"/>.</param>
    /// <param name="chatMessage">The chat message to send.</param>
    /// <param name="continuationToken">The continuation token to continue an ongoing operation.</param>
    /// <param name="options">The background responses options.</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <returns>The response messages generated by the client.</returns>
    public static Task<ChatResponse> GetResponseAsync(this IChatClient chatClient, string chatMessage, ResumptionToken continuationToken, BackgroundResponsesOptions? options = null, CancellationToken cancellationToken = default)
    {
        NewChatOptions chatOptions = new()
        {
            ContinuationToken = continuationToken,
            BackgroundResponsesOptions = options
        };

        return chatClient.GetResponseAsync(chatMessage, chatOptions, cancellationToken);
    }

    /// <summary>Sends chat messages and returns the response.</summary>
    /// <param name="chatClient">The <see cref="IChatClient"/>.</param>
    /// <param name="chatMessage">The chat message to send.</param>
    /// <param name="continuationToken">The continuation token to continue an ongoing operation.</param>
    /// <param name="options">The background responses options.</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <returns>The response messages generated by the client.</returns>
    public static Task<ChatResponse> GetResponseAsync(this IChatClient chatClient, ChatMessage chatMessage, ResumptionToken continuationToken, BackgroundResponsesOptions? options = null, CancellationToken cancellationToken = default)
    {
        NewChatOptions chatOptions = new()
        {
            ContinuationToken = continuationToken,
            BackgroundResponsesOptions = options
        };

        return chatClient.GetResponseAsync(chatMessage, chatOptions, cancellationToken);
    }

    /// <summary>Sends chat messages and returns the response.</summary>
    /// <param name="chatClient">The <see cref="IChatClient"/>.</param>
    /// <param name="chatMessages">The chat messages to send.</param>
    /// <param name="continuationToken">The continuation token to continue an ongoing operation.</param>
    /// <param name="options">The background responses options.</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <returns>The response messages generated by the client.</returns>
    public static Task<ChatResponse> GetResponseAsync(this IChatClient chatClient, IEnumerable<ChatMessage> chatMessages, ResumptionToken continuationToken, BackgroundResponsesOptions? options = null, CancellationToken cancellationToken = default)
    {
        NewChatOptions chatOptions = new()
        {
            ContinuationToken = continuationToken,
            BackgroundResponsesOptions = options
        };

        return chatClient.GetResponseAsync(chatMessages, chatOptions, cancellationToken);
    }

    /// <summary>Sends chat messages and streams the response.</summary>
    /// <param name="chatClient">The <see cref="IChatClient"/>.</param>
    /// <param name="continuationToken">The continuation token to continue an ongoing operation.</param>
    /// <param name="options">The chat options with which to configure the request.</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <returns>The response messages generated by the client.</returns>
    public static IAsyncEnumerable<ChatResponseUpdate> GetStreamingResponseAsync(this IChatClient chatClient, ResumptionToken continuationToken, BackgroundResponsesOptions? options = null, CancellationToken cancellationToken = default)
    {
        NewChatOptions chatOptions = new()
        {
            ContinuationToken = continuationToken,
            BackgroundResponsesOptions = options
        };

        return chatClient.GetStreamingResponseAsync([], chatOptions, cancellationToken);
    }

    /// <summary>Sends chat messages and streams the response.</summary>
    /// <param name="chatClient">The <see cref="IChatClient"/>.</param>
    /// <param name="chatMessage">The chat message to send.</param>
    /// <param name="continuationToken">The continuation token to continue an ongoing operation.</param>
    /// <param name="options">The chat options with which to configure the request.</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <returns>The response messages generated by the client.</returns>
    public static IAsyncEnumerable<ChatResponseUpdate> GetStreamingResponseAsync(this IChatClient chatClient, string chatMessage, ResumptionToken continuationToken, BackgroundResponsesOptions? options = null, CancellationToken cancellationToken = default)
    {
        NewChatOptions chatOptions = new()
        {
            ContinuationToken = continuationToken,
            BackgroundResponsesOptions = options
        };

        return chatClient.GetStreamingResponseAsync(chatMessage, chatOptions, cancellationToken);
    }

    /// <summary>Sends chat messages and streams the response.</summary>
    /// <param name="chatClient">The <see cref="IChatClient"/>.</param>
    /// <param name="chatMessage">The chat message to send.</param>
    /// <param name="continuationToken">The continuation token to continue an ongoing operation.</param>
    /// <param name="options">The chat options with which to configure the request.</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <returns>The response messages generated by the client.</returns>
    public static IAsyncEnumerable<ChatResponseUpdate> GetStreamingResponseAsync(this IChatClient chatClient, ChatMessage chatMessage, ResumptionToken continuationToken, BackgroundResponsesOptions? options = null, CancellationToken cancellationToken = default)
    {
        NewChatOptions chatOptions = new()
        {
            ContinuationToken = continuationToken,
            BackgroundResponsesOptions = options
        };

        return chatClient.GetStreamingResponseAsync(chatMessage, chatOptions, cancellationToken);
    }

    /// <summary>Sends chat messages and streams the response.</summary>
    /// <param name="chatClient">The <see cref="IChatClient"/>.</param>
    /// <param name="chatMessages">The chat messages to send.</param>
    /// <param name="continuationToken">The continuation token to continue an ongoing operation.</param>
    /// <param name="options">The chat options with which to configure the request.</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <returns>The response messages generated by the client.</returns>
    public static IAsyncEnumerable<ChatResponseUpdate> GetStreamingResponseAsync(this IChatClient chatClient, IEnumerable<ChatMessage> chatMessages, ResumptionToken continuationToken, BackgroundResponsesOptions? options = null, CancellationToken cancellationToken = default)
    {
        NewChatOptions chatOptions = new()
        {
            ContinuationToken = continuationToken,
            BackgroundResponsesOptions = options
        };

        return chatClient.GetStreamingResponseAsync(chatMessages, chatOptions, cancellationToken);
    }
}
