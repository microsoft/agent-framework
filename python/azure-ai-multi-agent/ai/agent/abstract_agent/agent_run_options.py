# ---------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# ---------------------------------------------------------

import typing
from typing import Optional, Collection, Callable, Awaitable

from ..common import ChatMessage

class AgentRunOptions:
    """
    Optional parameters when running an agent.
    """

    def __init__(self, options=None):
        """
        Initialize a new instance of the AgentRunOptions class.
        
        Args:
            options (Optional[AgentRunOptions]): The options to clone.
        """
        self._additional_instructions: Optional[str] = None
        self._on_intermediate_messages: Optional[Callable[[Collection[ChatMessage]], Awaitable[None]]] = None
        
        if options is not None:
            self._additional_instructions = options.additional_instructions
            self._on_intermediate_messages = options.on_intermediate_messages

    @property
    def additional_instructions(self) -> Optional[str]:
        """
        Gets any instructions, in addition to those that were provided to the agent
        initially, that need to be added to the prompt for this invocation only.
        
        Returns:
            Optional[str]: The additional instructions or None
        """
        return self._additional_instructions
    
    @additional_instructions.setter
    def additional_instructions(self, value: Optional[str]) -> None:
        """
        Sets any instructions, in addition to those that were provided to the agent
        initially, that need to be added to the prompt for this invocation only.
        
        Args:
            value (Optional[str]): The additional instructions or None
        """
        self._additional_instructions = value

    @property
    def on_intermediate_messages(self) -> Optional[Callable[[Collection[ChatMessage]], Awaitable[None]]]:
        """
        Gets a function to be called when a complete new message is generated by the agent.
        
        This callback is particularly useful in cases where the caller wants to receive 
        complete messages when invoking the agent with streaming.
        
        Returns:
            Optional[Callable[[Collection[ChatMessage]], Awaitable[None]]]: The callback or None
        """
        return self._on_intermediate_messages
    
    @on_intermediate_messages.setter
    def on_intermediate_messages(self, value: Optional[Callable[[Collection[ChatMessage]], Awaitable[None]]]) -> None:
        """
        Sets a function to be called when a complete new message is generated by the agent.
        
        This callback is particularly useful in cases where the caller wants to receive 
        complete messages when invoking the agent with streaming.
        
        Args:
            value (Optional[Callable[[Collection[ChatMessage]], Awaitable[None]]]): The callback or None
        """
        self._on_intermediate_messages = value
