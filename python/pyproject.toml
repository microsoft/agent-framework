[project]
name = "agent-framework"
readme = "README.md"
requires-python = ">=3.10"
version = "0.0.0"
license = {file = "LICENSE"}
urls.source = "https://github.com/microsoft/agent-framework/tree/main/python"
dependencies = [
    "pydantic>=2.11.5",
]

[tool.uv]
prerelease = "if-necessary-or-explicit"
dev-dependencies = [
    "pre-commit >= 3.7",
    "ruff>=0.11.8",
    "ty>=0.0.1a12",
    "poethepoet>=0.35.0",
    "pytest ~= 8.2",
    "pytest-xdist[psutil] ~= 3.6",
    "pytest-cov >= 5.0",
    "pytest-asyncio ~= 0.24",
    "pytest-timeout>=2.3.1",
]
environments = [
    "sys_platform == 'darwin'",
    "sys_platform == 'linux'",
    "sys_platform == 'win32'"
]

[tool.pytest.ini_options]
testpaths = 'tests'
addopts = "-ra -q -r fEX"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
]
timeout = 120


[tool.uv-dynamic-versioning]
fallback-version = "0.0.0"

[tool.ruff]
line-length = 120
target-version = "py310"
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
preview = true

[tool.ruff.lint]
fixable = ["ALL"]
unfixable = []
select = [
    "ASYNC", # async checks
    "B", # bugbear checks
    "CPY", # copyright
    "D", # pydocstyle checks
    "E", # pycodestyle error checks
    "ERA", # remove connected out code
    "F", # pyflakes checks
    "FIX", # fixme checks
    "I", # isort
    "INP", # implicit namespace package
    "ISC", # implicit string concat
    "Q", # flake8-quotes checks
    "RET", # flake8-return check
    "RSE", # raise exception parantheses check
    "RUF", # RUF specific rules
    "SIM", # flake8-simplify check
    "T20", # typing checks
    "TD", # todos
    "W", # pycodestyle warning checks
    "T100", # Debugger,
    "S", # Bandit checks
]
ignore = [
    "D100", # allow missing docstring in public module
    "D104", # allow missing docstring in public package
    "TD003", # allow missing link to todo issue
    "FIX002" # allow todo
]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-copyright]
notice-rgx = "^# Copyright \\(c\\) Microsoft\\. All rights reserved\\."
min-file-size = 1

[tool.pyright]
include = ["src", "tests", "samples"]
typeCheckingMode = "strict"
reportUnnecessaryIsInstance = false
reportMissingTypeStubs = false
venvPath = "python"
venv = ".venv"

[tool.mypy]
strict = true
python_version = "3.10"
ignore_missing_imports = true

disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = false

disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = true

[tool.bandit]
targets = ["src/agent_framework"]
exclude_dirs = ["tests"]

[tool.flit.module]
name = "agent_framework"

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"
