# Copyright (c) Microsoft. All rights reserved.

import asyncio
import sys
from collections.abc import AsyncIterable, Callable, Sequence
from typing import Any

from ._edge import (
    ConditionalEdgeGroup,
    EdgeGroup,
    PartitioningEdgeGroup,
    SingleEdgeGroup,
    SourceEdgeGroup,
    TargetEdgeGroup,
)
from ._events import RequestInfoEvent, WorkflowCompletedEvent, WorkflowEvent
from ._executor import Executor, RequestInfoExecutor
from ._runner import DEFAULT_MAX_ITERATIONS, Runner
from ._runner_context import InProcRunnerContext, RunnerContext
from ._shared_state import SharedState
from ._validation import validate_workflow_graph
from ._workflow_context import WorkflowContext

if sys.version_info >= (3, 11):
    from typing import Self  # pragma: no cover
else:
    from typing_extensions import Self  # pragma: no cover


class WorkflowRunResult(list[WorkflowEvent]):
    """A list of events generated during the workflow execution in non-streaming mode."""

    def get_completed_event(self) -> WorkflowCompletedEvent | None:
        """Get the completed event from the workflow run result.

        Returns:
            A completed WorkflowEvent instance if the workflow has a completed event, otherwise None.

        Raises:
            ValueError: If there are multiple completed events in the workflow run result.
        """
        completed_events = [event for event in self if isinstance(event, WorkflowCompletedEvent)]
        if not completed_events:
            return None
        if len(completed_events) > 1:
            raise ValueError("Multiple completed events found.")
        return completed_events[0]

    def get_request_info_events(self) -> list[RequestInfoEvent]:
        """Get all request info events from the workflow run result.

        Returns:
            A list of RequestInfoEvent instances found in the workflow run result.
        """
        return [event for event in self if isinstance(event, RequestInfoEvent)]


class Workflow:
    """A class representing a workflow that can be executed.

    This class is a placeholder for the workflow logic and does not implement any specific functionality.
    It serves as a base class for more complex workflows that can be defined in subclasses.
    """

    def __init__(
        self,
        edge_groups: list[EdgeGroup],
        start_executor: Executor | str,
        runner_context: RunnerContext,
        max_iterations: int,
    ):
        """Initialize the workflow with a list of edges.

        Args:
            edge_groups: A list of EdgeGroup instances that define the workflow edges.
            start_executor: The starting executor for the workflow, which can be an Executor instance or its ID.
            runner_context: The RunnerContext instance to be used during workflow execution.
            max_iterations: The maximum number of iterations the workflow will run for convergence.
        """
        self._edge_groups = edge_groups
        self._executors = self._build_executor_map(edge_groups)
        self._start_executor = start_executor

        self._shared_state = SharedState()
        self._runner = Runner(self._edge_groups, self._shared_state, runner_context, max_iterations=max_iterations)

    @property
    def edge_groups(self) -> list[EdgeGroup]:
        """Get the list of edge groups in the workflow."""
        return self._edge_groups

    @property
    def start_executor(self) -> Executor:
        """Get the starting executor of the workflow.

        Returns:
            The starting executor, which can be an Executor instance or its ID.
        """
        if isinstance(self._start_executor, str):
            return self._get_executor_by_id(self._start_executor)
        return self._start_executor

    @property
    def executors(self) -> list[Executor]:
        """Get the list of executors in the workflow."""
        return list(self._executors.values())

    async def run_streaming(self, message: Any) -> AsyncIterable[WorkflowEvent]:
        """Send a message to the starting executor of the workflow and stream the events generated by the workflow.

        Args:
            message: The message to be sent to the starting executor.

        Yields:
            WorkflowEvent: The events generated during the workflow execution.
        """
        executor = self._start_executor
        if isinstance(executor, str):
            executor = self._get_executor_by_id(executor)

        await executor.execute(
            message,
            WorkflowContext(
                executor.id,
                [
                    # Using the workflow class name as the source executor ID when
                    # delivering the first message to the starting executor
                    self.__class__.__name__
                ],
                self._shared_state,
                self._runner.context,
            ),
        )
        async for event in self._runner.run_until_convergence():
            yield event

    async def send_responses_streaming(self, responses: dict[str, Any]) -> AsyncIterable[WorkflowEvent]:
        """Send responses back to the workflow and stream the events generated by the workflow.

        Args:
            responses: The responses to be sent back to the workflow, where keys are request IDs
                       and values are the corresponding response data.

        Yields:
            WorkflowEvent: The events generated during the workflow execution after sending the responses.
        """
        request_info_executor = self._get_executor_by_id(RequestInfoExecutor.EXECUTOR_ID)
        if not isinstance(request_info_executor, RequestInfoExecutor):
            raise ValueError(f"Executor with ID {RequestInfoExecutor.EXECUTOR_ID} is not a RequestInfoExecutor.")

        async def _handle_response(response: Any, request_id: str) -> None:
            """Handle the response from the RequestInfoExecutor."""
            await request_info_executor.handle_response(
                response,
                request_id,
                WorkflowContext(
                    request_info_executor.id,
                    [
                        # Using the workflow class name as the source executor ID when
                        # delivering the first message to the starting executor
                        self.__class__.__name__
                    ],
                    self._shared_state,
                    self._runner.context,
                ),
            )

        await asyncio.gather(*[_handle_response(response, request_id) for request_id, response in responses.items()])

        async for event in self._runner.run_until_convergence():
            yield event

    async def run(self, message: Any) -> WorkflowRunResult:
        """Run the workflow with the given message.

        Args:
            message: The message to be processed by the workflow.

        Returns:
            A WorkflowRunResult instance containing a list of events generated during the workflow execution.
        """
        events = [event async for event in self.run_streaming(message)]
        return WorkflowRunResult(events)

    async def send_responses(self, responses: dict[str, Any]) -> WorkflowRunResult:
        """Send responses back to the workflow.

        Args:
            responses: A dictionary where keys are request IDs and values are the corresponding response data.

        Returns:
            A WorkflowRunResult instance containing a list of events generated during the workflow execution.
        """
        events = [event async for event in self.send_responses_streaming(responses)]
        return WorkflowRunResult(events)

    def _get_executor_by_id(self, executor_id: str) -> Executor:
        """Get an executor by its ID.

        Args:
            executor_id: The ID of the executor to retrieve.

        Returns:
            The Executor instance corresponding to the given ID.
        """
        if executor_id not in self._executors:
            raise ValueError(f"Executor with ID {executor_id} not found.")
        return self._executors[executor_id]

    def _build_executor_map(self, edge_groups: list[EdgeGroup]) -> dict[str, Executor]:
        """Build the executor map from edge groups.

        Args:
            edge_groups: A list of EdgeGroup instances.

        Returns:
            A dictionary mapping executor IDs to Executor instances.
        """
        executors: dict[str, Executor] = {}
        for group in edge_groups:
            for executor in group.source_executors + group.target_executors:
                executors[executor.id] = executor

        return executors


class WorkflowBuilder:
    """A builder class for constructing workflows.

    This class provides methods to add edges and set the starting executor for the workflow.
    """

    def __init__(self):
        """Initialize the WorkflowBuilder with an empty list of edges and no starting executor."""
        self._edge_groups: list[EdgeGroup] = []
        self._start_executor: Executor | str | None = None
        self._max_iterations: int = DEFAULT_MAX_ITERATIONS

    def add_edge(
        self,
        source: Executor,
        target: Executor,
        condition: Callable[[Any], bool] | None = None,
    ) -> "Self":
        """Add a directed edge between two executors.

        The output types of the source and the input types of the target must be compatible.

        Args:
            source: The source executor of the edge.
            target: The target executor of the edge.
            condition: An optional condition function that determines whether the edge
                       should be traversed based on the message type.
        """
        # TODO(@taochen): Support executor factories for lazy initialization
        self._edge_groups.append(SingleEdgeGroup(source, target, condition))
        return self

    def add_fan_out_edges(self, source: Executor, targets: Sequence[Executor]) -> "Self":
        """Add multiple edges to the workflow.

        The output types of the source and the input types of the targets must be compatible.
        Messages from the source executor will be sent to all target executors.

        Args:
            source: The source executor of the edges.
            targets: A list of target executors for the edges.
        """
        self._edge_groups.append(SourceEdgeGroup(source, targets))

        return self

    def add_conditional_fan_out_edges(
        self, source: Executor, targets: Sequence[Executor], conditions: Sequence[Callable[[Any], bool]]
    ) -> "Self":
        """Add a conditional fan out group of edges to the workflow.

        The output types of the source and the input types of the targets must be compatible.
        Messages from the source executor will be sent to one of the target executors based on
        the provided conditions.

        Think of this as a switch statement where each target executor corresponds to a case.
        Each condition function will be evaluated in order, and the first one that returns True
        will determine which target executor receives the message.

        The number of targets must be one greater than the number of conditions. The last target
        executor will receive messages that fall through all conditions (i.e., no condition matched).

        Args:
            source: The source executor of the edges.
            targets: A list of target executors for the edges.
            conditions: A list of condition functions that determine whether each edge should be traversed.
        """
        self._edge_groups.append(ConditionalEdgeGroup(source, targets, conditions))

        return self

    def add_partitioning_fan_out_edges(
        self,
        source: Executor,
        targets: Sequence[Executor],
        partition_func: Callable[[Any, int], list[int]],
    ) -> "Self":
        """Add a partitioning fan out group of edges to the workflow.

        The output types of the source and the input types of the targets must be compatible.
        Messages from the source executor will be sent to multiple target executors based on
        the provided partition function.

        The partition function should take a message and the number of target executors,
        and return a list of indices indicating which target executors should receive the message.

        Args:
            source: The source executor of the edges.
            targets: A list of target executors for the edges.
            partition_func: A function that partitions messages to target executors.
        """
        self._edge_groups.append(PartitioningEdgeGroup(source, targets, partition_func))

        return self

    def add_fan_in_edges(self, sources: Sequence[Executor], target: Executor) -> "Self":
        """Add multiple edges from sources to a single target executor.

        The edges will be grouped together for synchronized processing, meaning
        the target executor will only be executed once all source executors have completed.

        The target executor will receive a list of messages aggregated from all source executors.
        Thus the input types of the target executor must be compatible with a list of the output
        types of the source executors. For example:

            class Target(Executor):
                @handler
                def handle_messages(self, messages: list[Message]) -> None:
                    # Process the aggregated messages from all sources

            class Source(Executor):
                @handler(output_type=[Message])
                def handle_message(self, message: Message) -> None:
                    # Send a message to the target executor
                    self.send_message(message)

            workflow = (
                WorkflowBuilder()
                .add_fan_in_edges(
                    [Source(id="source1"), Source(id="source2")],
                    Target(id="target")
                )
                .build()
            )

        Args:
            sources: A list of source executors for the edges.
            target: The target executor for the edges.
        """
        self._edge_groups.append(TargetEdgeGroup(sources, target))

        return self

    def add_chain(self, executors: Sequence[Executor]) -> "Self":
        """Add a chain of executors to the workflow.

        The output of each executor in the chain will be sent to the next executor in the chain.
        The input types of each executor must be compatible with the output types of the previous executor.

        Circles in the chain are not allowed, meaning the chain cannot have two executors with the same ID.

        Args:
            executors: A list of executors to be added to the chain.
        """
        for i in range(len(executors) - 1):
            self.add_edge(executors[i], executors[i + 1])
        return self

    def set_start_executor(self, executor: Executor | str) -> "Self":
        """Set the starting executor for the workflow.

        Args:
            executor: The starting executor, which can be an Executor instance or its ID.
        """
        self._start_executor = executor
        return self

    def set_max_iterations(self, max_iterations: int) -> "Self":
        """Set the maximum number of iterations for the workflow.

        Args:
            max_iterations: The maximum number of iterations the workflow will run for convergence.
        """
        self._max_iterations = max_iterations
        return self

    def build(self) -> Workflow:
        """Build and return the constructed workflow.

        This method performs validation before building the workflow.

        Returns:
            A Workflow instance with the defined edges and starting executor.

        Raises:
            ValueError: If starting executor is not set.
            WorkflowValidationError: If workflow validation fails (includes EdgeDuplicationError,
                TypeCompatibilityError, and GraphConnectivityError subclasses).
        """
        if not self._start_executor:
            raise ValueError("Starting executor must be set before building the workflow.")

        validate_workflow_graph(self._edge_groups, self._start_executor)

        return Workflow(self._edge_groups, self._start_executor, InProcRunnerContext(), self._max_iterations)
