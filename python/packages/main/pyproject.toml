[project]
name = "agent-framework"
description = "Microsoft Agent Framework for building AI Agents with Python."
authors = [{ name = "Microsoft", email = "SK-Support@microsoft.com"}]
readme = "README.md"
requires-python = ">=3.10"
version = "0.1.0b1"
license-files = ["LICENSE"]
urls.homepage = "https://learn.microsoft.com/en-us/semantic-kernel/overview/"
urls.source = "https://github.com/microsoft/agent-framework/tree/main/python"
urls.release_notes = "https://github.com/microsoft/agent-framework/releases?q=tag%3Apython-1&expanded=true"
urls.issues = "https://github.com/microsoft/agent-framework/issues"
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Framework :: Pydantic :: 2",
  "Typing :: Typed",
]
dependencies = [
    "openai>=1.99.0",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    "typing-extensions>=4.14.0",
    "opentelemetry-api ~= 1.24",
    "opentelemetry-sdk ~= 1.24",
    "mcp[ws]>=1.13",
    "azure-monitor-opentelemetry>=1.7.0",
    "azure-monitor-opentelemetry-exporter>=1.0.0b41",
    "opentelemetry-exporter-otlp-proto-grpc>=1.36.0",
    "opentelemetry-semantic-conventions-ai>=0.4.13",
    "aiofiles>=24.1.0"
]

[project.optional-dependencies]
azure = [
    "agent-framework-azure"
]
foundry = [
    "agent-framework-foundry"
]
viz = [
    "graphviz>=0.20.0",
]
runtime = [
    "agent-framework-runtime"
]
mem0 = [
    "agent-framework-mem0"
]
all = [
    "agent-framework-azure",
    "agent-framework-foundry",
    "agent-framework-runtime",
    "agent-framework-mem0"
]

[tool.uv]
prerelease = "if-necessary-or-explicit"
environments = [
    "sys_platform == 'darwin'",
    "sys_platform == 'linux'",
    "sys_platform == 'win32'"
]

[tool.uv-dynamic-versioning]
fallback-version = "0.0.0"

[tool.pytest.ini_options]
testpaths = 'tests'
addopts = "-ra -q -r fEX"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = []
timeout = 120

[tool.coverage.run]
omit = [
    "**/__init__.py"
]

[tool.ruff]
extend = "../../pyproject.toml"

[tool.pyright]
extend = "../../pyproject.toml"
exclude = ['tests']

[tool.mypy]
plugins = ['pydantic.mypy']
strict = true
python_version = "3.10"
ignore_missing_imports = true
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = false
disallow_incomplete_defs = true
disallow_untyped_decorators = true

[tool.bandit]
targets = ["agent_framework"]
exclude_dirs = ["tests"]

[tool.poe]
executor.type = "uv"
include = "../../shared_tasks.toml"
[tool.poe.tasks]
mypy = "mypy --config-file $POE_ROOT/pyproject.toml agent_framework"
test = "pytest --cov=agent_framework --cov-report=term-missing:skip-covered tests"

[build-system]
requires = ["flit-core >= 3.9,<4.0"]
build-backend = "flit_core.buildapi"
